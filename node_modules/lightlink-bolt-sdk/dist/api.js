"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * TSOA
 * Build swagger-compliant REST APIs using TypeScript and Node
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsApi = exports.TransactionsApiFactory = exports.TransactionsApiFp = exports.TransactionsApiAxiosParamCreator = exports.TokensApi = exports.TokensApiFactory = exports.TokensApiFp = exports.TokensApiAxiosParamCreator = exports.OrganisationsApi = exports.OrganisationsApiFactory = exports.OrganisationsApiFp = exports.OrganisationsApiAxiosParamCreator = exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.ContractsApi = exports.ContractsApiFactory = exports.ContractsApiFp = exports.ContractsApiAxiosParamCreator = exports.ContractExecutionsApi = exports.ContractExecutionsApiFactory = exports.ContractExecutionsApiFp = exports.ContractExecutionsApiAxiosParamCreator = exports.AuthorisationApi = exports.AuthorisationApiFactory = exports.AuthorisationApiFp = exports.AuthorisationApiAxiosParamCreator = exports.AccountsApi = exports.AccountsApiFactory = exports.AccountsApiFp = exports.AccountsApiAxiosParamCreator = exports.UserOrganisationType = exports.ContractType = exports.ContractExecutionStatus = exports.AccountType = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.AccountType = {
    Managed: 'MANAGED',
    ExternallyOwned: 'EXTERNALLY_OWNED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ContractExecutionStatus = {
    Pending: 'PENDING',
    Success: 'SUCCESS',
    Failed: 'FAILED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ContractType = {
    Erc20: 'ERC20',
    Erc721: 'ERC721',
    Erc1155: 'ERC1155',
    Custom: 'CUSTOM'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.UserOrganisationType = {
    Admin: 'admin',
    Member: 'member'
};
/**
 * AccountsApi - axios parameter creator
 * @export
 */
var AccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {ICreateAccount} iCreateAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: function (iCreateAccount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'iCreateAccount' is not null or undefined
                            (0, common_1.assertParamExists)('createAccount', 'iCreateAccount', iCreateAccount);
                            localVarPath = "/accounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iCreateAccount, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
         * @param {string} address The address of the owner address to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalances: function (address, pageSize, pageNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'address' is not null or undefined
                            (0, common_1.assertParamExists)('getAccountBalances', 'address', address);
                            localVarPath = "/accounts/{address}/balances"
                                .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (pageSize !== undefined) {
                                localVarQueryParameter['page_size'] = pageSize;
                            }
                            if (pageNumber !== undefined) {
                                localVarQueryParameter['page_number'] = pageNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the owner address to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransfers: function (address, pageSize, pageNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'address' is not null or undefined
                            (0, common_1.assertParamExists)('getAccountTransfers', 'address', address);
                            localVarPath = "/accounts/{address}/transfers"
                                .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (pageSize !== undefined) {
                                localVarQueryParameter['page_size'] = pageSize;
                            }
                            if (pageNumber !== undefined) {
                                localVarQueryParameter['page_number'] = pageNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccountsApiAxiosParamCreator = AccountsApiAxiosParamCreator;
/**
 * AccountsApi - functional programming interface
 * @export
 */
var AccountsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccountsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {ICreateAccount} iCreateAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: function (iCreateAccount, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAccount(iCreateAccount, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.createAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
         * @param {string} address The address of the owner address to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalances: function (address, pageSize, pageNumber, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccountBalances(address, pageSize, pageNumber, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.getAccountBalances']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the owner address to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransfers: function (address, pageSize, pageNumber, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccountTransfers(address, pageSize, pageNumber, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AccountsApi.getAccountTransfers']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AccountsApiFp = AccountsApiFp;
/**
 * AccountsApi - factory interface
 * @export
 */
var AccountsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccountsApiFp)(configuration);
    return {
        /**
         *
         * @param {ICreateAccount} iCreateAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: function (iCreateAccount, options) {
            return localVarFp.createAccount(iCreateAccount, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
         * @param {string} address The address of the owner address to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalances: function (address, pageSize, pageNumber, options) {
            return localVarFp.getAccountBalances(address, pageSize, pageNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the owner address to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransfers: function (address, pageSize, pageNumber, options) {
            return localVarFp.getAccountTransfers(address, pageSize, pageNumber, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccountsApiFactory = AccountsApiFactory;
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
var AccountsApi = /** @class */ (function (_super) {
    __extends(AccountsApi, _super);
    function AccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {ICreateAccount} iCreateAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.createAccount = function (iCreateAccount, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).createAccount(iCreateAccount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.getAccountBalances = function (address, pageSize, pageNumber, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).getAccountBalances(address, pageSize, pageNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.getAccountTransfers = function (address, pageSize, pageNumber, options) {
        var _this = this;
        return (0, exports.AccountsApiFp)(this.configuration).getAccountTransfers(address, pageSize, pageNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountsApi;
}(base_1.BaseAPI));
exports.AccountsApi = AccountsApi;
/**
 * AuthorisationApi - axios parameter creator
 * @export
 */
var AuthorisationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {IPostAuthInitiate} iPostAuthInitiate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateSession: function (iPostAuthInitiate, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'iPostAuthInitiate' is not null or undefined
                            (0, common_1.assertParamExists)('initiateSession', 'iPostAuthInitiate', iPostAuthInitiate);
                            localVarPath = "/auth/session/initiate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostAuthInitiate, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AuthorisationApiAxiosParamCreator = AuthorisationApiAxiosParamCreator;
/**
 * AuthorisationApi - functional programming interface
 * @export
 */
var AuthorisationApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthorisationApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {IPostAuthInitiate} iPostAuthInitiate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateSession: function (iPostAuthInitiate, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.initiateSession(iPostAuthInitiate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthorisationApi.initiateSession']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AuthorisationApiFp = AuthorisationApiFp;
/**
 * AuthorisationApi - factory interface
 * @export
 */
var AuthorisationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthorisationApiFp)(configuration);
    return {
        /**
         *
         * @param {IPostAuthInitiate} iPostAuthInitiate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateSession: function (iPostAuthInitiate, options) {
            return localVarFp.initiateSession(iPostAuthInitiate, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthorisationApiFactory = AuthorisationApiFactory;
/**
 * AuthorisationApi - object-oriented interface
 * @export
 * @class AuthorisationApi
 * @extends {BaseAPI}
 */
var AuthorisationApi = /** @class */ (function (_super) {
    __extends(AuthorisationApi, _super);
    function AuthorisationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {IPostAuthInitiate} iPostAuthInitiate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorisationApi
     */
    AuthorisationApi.prototype.initiateSession = function (iPostAuthInitiate, options) {
        var _this = this;
        return (0, exports.AuthorisationApiFp)(this.configuration).initiateSession(iPostAuthInitiate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthorisationApi;
}(base_1.BaseAPI));
exports.AuthorisationApi = AuthorisationApi;
/**
 * ContractExecutionsApi - axios parameter creator
 * @export
 */
var ContractExecutionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {IPostContractExecution} iPostContractExecution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeContract: function (iPostContractExecution, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'iPostContractExecution' is not null or undefined
                            (0, common_1.assertParamExists)('executeContract', 'iPostContractExecution', iPostContractExecution);
                            localVarPath = "/executions/execute";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostContractExecution, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionByKey: function (key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('getExecutionByKey', 'key', key);
                            localVarPath = "/executions/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {number} limit
         * @param {number} offset
         * @param {string} [contractAddress]
         * @param {string} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions: function (limit, offset, contractAddress, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'limit' is not null or undefined
                            (0, common_1.assertParamExists)('getExecutions', 'limit', limit);
                            // verify required parameter 'offset' is not null or undefined
                            (0, common_1.assertParamExists)('getExecutions', 'offset', offset);
                            localVarPath = "/executions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (contractAddress !== undefined) {
                                localVarQueryParameter['contract_address'] = contractAddress;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ContractExecutionsApiAxiosParamCreator = ContractExecutionsApiAxiosParamCreator;
/**
 * ContractExecutionsApi - functional programming interface
 * @export
 */
var ContractExecutionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ContractExecutionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {IPostContractExecution} iPostContractExecution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeContract: function (iPostContractExecution, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.executeContract(iPostContractExecution, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractExecutionsApi.executeContract']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionByKey: function (key, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExecutionByKey(key, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractExecutionsApi.getExecutionByKey']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {number} limit
         * @param {number} offset
         * @param {string} [contractAddress]
         * @param {string} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions: function (limit, offset, contractAddress, status, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExecutions(limit, offset, contractAddress, status, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractExecutionsApi.getExecutions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ContractExecutionsApiFp = ContractExecutionsApiFp;
/**
 * ContractExecutionsApi - factory interface
 * @export
 */
var ContractExecutionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ContractExecutionsApiFp)(configuration);
    return {
        /**
         *
         * @param {IPostContractExecution} iPostContractExecution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeContract: function (iPostContractExecution, options) {
            return localVarFp.executeContract(iPostContractExecution, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionByKey: function (key, options) {
            return localVarFp.getExecutionByKey(key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {number} limit
         * @param {number} offset
         * @param {string} [contractAddress]
         * @param {string} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions: function (limit, offset, contractAddress, status, options) {
            return localVarFp.getExecutions(limit, offset, contractAddress, status, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ContractExecutionsApiFactory = ContractExecutionsApiFactory;
/**
 * ContractExecutionsApi - object-oriented interface
 * @export
 * @class ContractExecutionsApi
 * @extends {BaseAPI}
 */
var ContractExecutionsApi = /** @class */ (function (_super) {
    __extends(ContractExecutionsApi, _super);
    function ContractExecutionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {IPostContractExecution} iPostContractExecution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractExecutionsApi
     */
    ContractExecutionsApi.prototype.executeContract = function (iPostContractExecution, options) {
        var _this = this;
        return (0, exports.ContractExecutionsApiFp)(this.configuration).executeContract(iPostContractExecution, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractExecutionsApi
     */
    ContractExecutionsApi.prototype.getExecutionByKey = function (key, options) {
        var _this = this;
        return (0, exports.ContractExecutionsApiFp)(this.configuration).getExecutionByKey(key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {number} limit
     * @param {number} offset
     * @param {string} [contractAddress]
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractExecutionsApi
     */
    ContractExecutionsApi.prototype.getExecutions = function (limit, offset, contractAddress, status, options) {
        var _this = this;
        return (0, exports.ContractExecutionsApiFp)(this.configuration).getExecutions(limit, offset, contractAddress, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ContractExecutionsApi;
}(base_1.BaseAPI));
exports.ContractExecutionsApi = ContractExecutionsApi;
/**
 * ContractsApi - axios parameter creator
 * @export
 */
var ContractsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add a new contract. This endpoint creates a new contract with the provided contract data.
         * @param {IPostContract} iPostContract The contract data required to create the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContract: function (iPostContract, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'iPostContract' is not null or undefined
                            (0, common_1.assertParamExists)('addContract', 'iPostContract', iPostContract);
                            localVarPath = "/contracts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostContract, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
         * @param {IDeployContract} iDeployContract The data required to deploy the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract: function (iDeployContract, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'iDeployContract' is not null or undefined
                            (0, common_1.assertParamExists)('deployContract', 'iDeployContract', iDeployContract);
                            localVarPath = "/contracts/deploy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iDeployContract, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
         * @param {ContractType} [type] Optional filter by contract type.
         * @param {number} [pageSize] The number of contracts per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredContracts: function (type, pageSize, pageNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/contracts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['page_size'] = pageSize;
                            }
                            if (pageNumber !== undefined) {
                                localVarQueryParameter['page_number'] = pageNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
         * @param {string} address The address of the contract to execute.
         * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract: function (address, iPostReadContract, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'address' is not null or undefined
                            (0, common_1.assertParamExists)('readContract', 'address', address);
                            // verify required parameter 'iPostReadContract' is not null or undefined
                            (0, common_1.assertParamExists)('readContract', 'iPostReadContract', iPostReadContract);
                            localVarPath = "/contracts/{address}/read"
                                .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostReadContract, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
         * @param {string} contractAddress The address of the contract to add the webhook to.
         * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhook: function (contractAddress, iPostCreateWebhook, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('webhook', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostCreateWebhook' is not null or undefined
                            (0, common_1.assertParamExists)('webhook', 'iPostCreateWebhook', iPostCreateWebhook);
                            localVarPath = "/contracts/{contractAddress}/webhooks"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostCreateWebhook, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ContractsApiAxiosParamCreator = ContractsApiAxiosParamCreator;
/**
 * ContractsApi - functional programming interface
 * @export
 */
var ContractsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ContractsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add a new contract. This endpoint creates a new contract with the provided contract data.
         * @param {IPostContract} iPostContract The contract data required to create the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContract: function (iPostContract, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addContract(iPostContract, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractsApi.addContract']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
         * @param {IDeployContract} iDeployContract The data required to deploy the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract: function (iDeployContract, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deployContract(iDeployContract, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractsApi.deployContract']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
         * @param {ContractType} [type] Optional filter by contract type.
         * @param {number} [pageSize] The number of contracts per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredContracts: function (type, pageSize, pageNumber, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFilteredContracts(type, pageSize, pageNumber, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractsApi.getFilteredContracts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
         * @param {string} address The address of the contract to execute.
         * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract: function (address, iPostReadContract, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.readContract(address, iPostReadContract, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractsApi.readContract']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
         * @param {string} contractAddress The address of the contract to add the webhook to.
         * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhook: function (contractAddress, iPostCreateWebhook, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.webhook(contractAddress, iPostCreateWebhook, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContractsApi.webhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ContractsApiFp = ContractsApiFp;
/**
 * ContractsApi - factory interface
 * @export
 */
var ContractsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ContractsApiFp)(configuration);
    return {
        /**
         * Add a new contract. This endpoint creates a new contract with the provided contract data.
         * @param {IPostContract} iPostContract The contract data required to create the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContract: function (iPostContract, options) {
            return localVarFp.addContract(iPostContract, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
         * @param {IDeployContract} iDeployContract The data required to deploy the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract: function (iDeployContract, options) {
            return localVarFp.deployContract(iDeployContract, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
         * @param {ContractType} [type] Optional filter by contract type.
         * @param {number} [pageSize] The number of contracts per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredContracts: function (type, pageSize, pageNumber, options) {
            return localVarFp.getFilteredContracts(type, pageSize, pageNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
         * @param {string} address The address of the contract to execute.
         * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract: function (address, iPostReadContract, options) {
            return localVarFp.readContract(address, iPostReadContract, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
         * @param {string} contractAddress The address of the contract to add the webhook to.
         * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhook: function (contractAddress, iPostCreateWebhook, options) {
            return localVarFp.webhook(contractAddress, iPostCreateWebhook, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ContractsApiFactory = ContractsApiFactory;
/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
var ContractsApi = /** @class */ (function (_super) {
    __extends(ContractsApi, _super);
    function ContractsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a new contract. This endpoint creates a new contract with the provided contract data.
     * @param {IPostContract} iPostContract The contract data required to create the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    ContractsApi.prototype.addContract = function (iPostContract, options) {
        var _this = this;
        return (0, exports.ContractsApiFp)(this.configuration).addContract(iPostContract, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
     * @param {IDeployContract} iDeployContract The data required to deploy the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    ContractsApi.prototype.deployContract = function (iDeployContract, options) {
        var _this = this;
        return (0, exports.ContractsApiFp)(this.configuration).deployContract(iDeployContract, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
     * @param {ContractType} [type] Optional filter by contract type.
     * @param {number} [pageSize] The number of contracts per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    ContractsApi.prototype.getFilteredContracts = function (type, pageSize, pageNumber, options) {
        var _this = this;
        return (0, exports.ContractsApiFp)(this.configuration).getFilteredContracts(type, pageSize, pageNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
     * @param {string} address The address of the contract to execute.
     * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    ContractsApi.prototype.readContract = function (address, iPostReadContract, options) {
        var _this = this;
        return (0, exports.ContractsApiFp)(this.configuration).readContract(address, iPostReadContract, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
     * @param {string} contractAddress The address of the contract to add the webhook to.
     * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    ContractsApi.prototype.webhook = function (contractAddress, iPostCreateWebhook, options) {
        var _this = this;
        return (0, exports.ContractsApiFp)(this.configuration).webhook(contractAddress, iPostCreateWebhook, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ContractsApi;
}(base_1.BaseAPI));
exports.ContractsApi = ContractsApi;
/**
 * DefaultApi - axios parameter creator
 * @export
 */
var DefaultApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteStatus: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/status";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
var DefaultApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteStatus: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSiteStatus(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DefaultApi.getSiteStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
var DefaultApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteStatus: function (options) {
            return localVarFp.getSiteStatus(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getSiteStatus = function (options) {
        var _this = this;
        return (0, exports.DefaultApiFp)(this.configuration).getSiteStatus(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DefaultApi;
}(base_1.BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * OrganisationsApi - axios parameter creator
 * @export
 */
var OrganisationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
         * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganisation: function (iPostOrganisation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'iPostOrganisation' is not null or undefined
                            (0, common_1.assertParamExists)('createOrganisation', 'iPostOrganisation', iPostOrganisation);
                            localVarPath = "/organisations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostOrganisation, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
         * @param {string} id The ID of the organisation to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisationById: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('getOrganisationById', 'id', id);
                    localVarPath = "/organisations/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
         * @param {string} [name] Optional name filter to search for organisations by name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisations: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/organisations";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (name !== undefined) {
                        localVarQueryParameter['name'] = name;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
         * @param {string} id The ID of the organisation to update.
         * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganisationById: function (id, iPostOrganisation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('updateOrganisationById', 'id', id);
                    // verify required parameter 'iPostOrganisation' is not null or undefined
                    (0, common_1.assertParamExists)('updateOrganisationById', 'iPostOrganisation', iPostOrganisation);
                    localVarPath = "/organisations/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostOrganisation, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.OrganisationsApiAxiosParamCreator = OrganisationsApiAxiosParamCreator;
/**
 * OrganisationsApi - functional programming interface
 * @export
 */
var OrganisationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OrganisationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
         * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganisation: function (iPostOrganisation, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOrganisation(iPostOrganisation, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.createOrganisation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
         * @param {string} id The ID of the organisation to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisationById: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrganisationById(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.getOrganisationById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
         * @param {string} [name] Optional name filter to search for organisations by name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisations: function (name, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrganisations(name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.getOrganisations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
         * @param {string} id The ID of the organisation to update.
         * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganisationById: function (id, iPostOrganisation, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateOrganisationById(id, iPostOrganisation, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.updateOrganisationById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OrganisationsApiFp = OrganisationsApiFp;
/**
 * OrganisationsApi - factory interface
 * @export
 */
var OrganisationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OrganisationsApiFp)(configuration);
    return {
        /**
         * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
         * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganisation: function (iPostOrganisation, options) {
            return localVarFp.createOrganisation(iPostOrganisation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
         * @param {string} id The ID of the organisation to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisationById: function (id, options) {
            return localVarFp.getOrganisationById(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
         * @param {string} [name] Optional name filter to search for organisations by name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisations: function (name, options) {
            return localVarFp.getOrganisations(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
         * @param {string} id The ID of the organisation to update.
         * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganisationById: function (id, iPostOrganisation, options) {
            return localVarFp.updateOrganisationById(id, iPostOrganisation, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OrganisationsApiFactory = OrganisationsApiFactory;
/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */
var OrganisationsApi = /** @class */ (function (_super) {
    __extends(OrganisationsApi, _super);
    function OrganisationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
     * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    OrganisationsApi.prototype.createOrganisation = function (iPostOrganisation, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).createOrganisation(iPostOrganisation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
     * @param {string} id The ID of the organisation to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    OrganisationsApi.prototype.getOrganisationById = function (id, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).getOrganisationById(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
     * @param {string} [name] Optional name filter to search for organisations by name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    OrganisationsApi.prototype.getOrganisations = function (name, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).getOrganisations(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
     * @param {string} id The ID of the organisation to update.
     * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    OrganisationsApi.prototype.updateOrganisationById = function (id, iPostOrganisation, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).updateOrganisationById(id, iPostOrganisation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrganisationsApi;
}(base_1.BaseAPI));
exports.OrganisationsApi = OrganisationsApi;
/**
 * TokensApi - axios parameter creator
 * @export
 */
var TokensApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Transfers a specified ERC1155 token from one address to another.
         * @param {string} contractAddress The address of the ERC1155 token contract
         * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc1155Transfer: function (contractAddress, iPostTransferErc1155, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('createErc1155Transfer', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostTransferErc1155' is not null or undefined
                            (0, common_1.assertParamExists)('createErc1155Transfer', 'iPostTransferErc1155', iPostTransferErc1155);
                            localVarPath = "/tokens/transfer/erc1155/{contractAddress}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostTransferErc1155, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Transfers a specified amount of ERC20 tokens from one address to another.
         * @param {string} contractAddress The address of the ERC20 token contract
         * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc20transfer: function (contractAddress, iPostTransferErc20, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('createErc20transfer', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostTransferErc20' is not null or undefined
                            (0, common_1.assertParamExists)('createErc20transfer', 'iPostTransferErc20', iPostTransferErc20);
                            localVarPath = "/tokens/transfer/erc20/{contractAddress}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostTransferErc20, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Transfers a specified ERC721 token from one address to another.
         * @param {string} contractAddress The address of the ERC721 token contract
         * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc721Transfer: function (contractAddress, iPostTransferErc721, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('createErc721Transfer', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostTransferErc721' is not null or undefined
                            (0, common_1.assertParamExists)('createErc721Transfer', 'iPostTransferErc721', iPostTransferErc721);
                            localVarPath = "/tokens/transfer/erc721/{contractAddress}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostTransferErc721, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNFTMetadata: function (contractAddress, tokenId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'contractAddress' is not null or undefined
                    (0, common_1.assertParamExists)('getNFTMetadata', 'contractAddress', contractAddress);
                    // verify required parameter 'tokenId' is not null or undefined
                    (0, common_1.assertParamExists)('getNFTMetadata', 'tokenId', tokenId);
                    localVarPath = "/tokens/metadata/{contractAddress}/{tokenId}"
                        .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)))
                        .replace("{".concat("tokenId", "}"), encodeURIComponent(String(tokenId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the token to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBalances: function (address, pageSize, pageNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'address' is not null or undefined
                            (0, common_1.assertParamExists)('getTokenBalances', 'address', address);
                            localVarPath = "/tokens/{address}/balances"
                                .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (pageSize !== undefined) {
                                localVarQueryParameter['page_size'] = pageSize;
                            }
                            if (pageNumber !== undefined) {
                                localVarQueryParameter['page_number'] = pageNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the token to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenTransfers: function (address, pageSize, pageNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'address' is not null or undefined
                            (0, common_1.assertParamExists)('getTokenTransfers', 'address', address);
                            localVarPath = "/tokens/{address}/transfers"
                                .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (pageSize !== undefined) {
                                localVarQueryParameter['page_size'] = pageSize;
                            }
                            if (pageNumber !== undefined) {
                                localVarQueryParameter['page_number'] = pageNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc155} iPostMintErc155
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC1155Token: function (contractAddress, iPostMintErc155, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('mintERC1155Token', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostMintErc155' is not null or undefined
                            (0, common_1.assertParamExists)('mintERC1155Token', 'iPostMintErc155', iPostMintErc155);
                            localVarPath = "/tokens/mint/erc1155/{contractAddress}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostMintErc155, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc20} iPostMintErc20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC20Token: function (contractAddress, iPostMintErc20, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('mintERC20Token', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostMintErc20' is not null or undefined
                            (0, common_1.assertParamExists)('mintERC20Token', 'iPostMintErc20', iPostMintErc20);
                            localVarPath = "/tokens/mint/erc20/{contractAddress}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostMintErc20, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc721} iPostMintErc721
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC721Token: function (contractAddress, iPostMintErc721, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('mintERC721Token', 'contractAddress', contractAddress);
                            // verify required parameter 'iPostMintErc721' is not null or undefined
                            (0, common_1.assertParamExists)('mintERC721Token', 'iPostMintErc721', iPostMintErc721);
                            localVarPath = "/tokens/mint/erc721/{contractAddress}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iPostMintErc721, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {INFTMetadata} iNFTMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNFTMetadata: function (contractAddress, tokenId, iNFTMetadata, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('postNFTMetadata', 'contractAddress', contractAddress);
                            // verify required parameter 'tokenId' is not null or undefined
                            (0, common_1.assertParamExists)('postNFTMetadata', 'tokenId', tokenId);
                            // verify required parameter 'iNFTMetadata' is not null or undefined
                            (0, common_1.assertParamExists)('postNFTMetadata', 'iNFTMetadata', iNFTMetadata);
                            localVarPath = "/tokens/metadata/{contractAddress}/{tokenId}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)))
                                .replace("{".concat("tokenId", "}"), encodeURIComponent(String(tokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iNFTMetadata, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {INFTMetadata} iNFTMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNFTMetadata: function (contractAddress, tokenId, iNFTMetadata, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractAddress' is not null or undefined
                            (0, common_1.assertParamExists)('putNFTMetadata', 'contractAddress', contractAddress);
                            // verify required parameter 'tokenId' is not null or undefined
                            (0, common_1.assertParamExists)('putNFTMetadata', 'tokenId', tokenId);
                            // verify required parameter 'iNFTMetadata' is not null or undefined
                            (0, common_1.assertParamExists)('putNFTMetadata', 'iNFTMetadata', iNFTMetadata);
                            localVarPath = "/tokens/metadata/{contractAddress}/{tokenId}"
                                .replace("{".concat("contractAddress", "}"), encodeURIComponent(String(contractAddress)))
                                .replace("{".concat("tokenId", "}"), encodeURIComponent(String(tokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iNFTMetadata, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TokensApiAxiosParamCreator = TokensApiAxiosParamCreator;
/**
 * TokensApi - functional programming interface
 * @export
 */
var TokensApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TokensApiAxiosParamCreator)(configuration);
    return {
        /**
         * Transfers a specified ERC1155 token from one address to another.
         * @param {string} contractAddress The address of the ERC1155 token contract
         * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc1155Transfer: function (contractAddress, iPostTransferErc1155, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createErc1155Transfer(contractAddress, iPostTransferErc1155, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.createErc1155Transfer']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Transfers a specified amount of ERC20 tokens from one address to another.
         * @param {string} contractAddress The address of the ERC20 token contract
         * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc20transfer: function (contractAddress, iPostTransferErc20, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createErc20transfer(contractAddress, iPostTransferErc20, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.createErc20transfer']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Transfers a specified ERC721 token from one address to another.
         * @param {string} contractAddress The address of the ERC721 token contract
         * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc721Transfer: function (contractAddress, iPostTransferErc721, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createErc721Transfer(contractAddress, iPostTransferErc721, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.createErc721Transfer']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNFTMetadata: function (contractAddress, tokenId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNFTMetadata(contractAddress, tokenId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.getNFTMetadata']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the token to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBalances: function (address, pageSize, pageNumber, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTokenBalances(address, pageSize, pageNumber, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.getTokenBalances']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the token to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenTransfers: function (address, pageSize, pageNumber, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTokenTransfers(address, pageSize, pageNumber, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.getTokenTransfers']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc155} iPostMintErc155
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC1155Token: function (contractAddress, iPostMintErc155, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintERC1155Token(contractAddress, iPostMintErc155, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.mintERC1155Token']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc20} iPostMintErc20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC20Token: function (contractAddress, iPostMintErc20, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintERC20Token(contractAddress, iPostMintErc20, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.mintERC20Token']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc721} iPostMintErc721
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC721Token: function (contractAddress, iPostMintErc721, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintERC721Token(contractAddress, iPostMintErc721, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.mintERC721Token']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {INFTMetadata} iNFTMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNFTMetadata: function (contractAddress, tokenId, iNFTMetadata, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postNFTMetadata(contractAddress, tokenId, iNFTMetadata, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.postNFTMetadata']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {INFTMetadata} iNFTMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNFTMetadata: function (contractAddress, tokenId, iNFTMetadata, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putNFTMetadata(contractAddress, tokenId, iNFTMetadata, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.putNFTMetadata']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TokensApiFp = TokensApiFp;
/**
 * TokensApi - factory interface
 * @export
 */
var TokensApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TokensApiFp)(configuration);
    return {
        /**
         * Transfers a specified ERC1155 token from one address to another.
         * @param {string} contractAddress The address of the ERC1155 token contract
         * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc1155Transfer: function (contractAddress, iPostTransferErc1155, options) {
            return localVarFp.createErc1155Transfer(contractAddress, iPostTransferErc1155, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Transfers a specified amount of ERC20 tokens from one address to another.
         * @param {string} contractAddress The address of the ERC20 token contract
         * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc20transfer: function (contractAddress, iPostTransferErc20, options) {
            return localVarFp.createErc20transfer(contractAddress, iPostTransferErc20, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Transfers a specified ERC721 token from one address to another.
         * @param {string} contractAddress The address of the ERC721 token contract
         * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createErc721Transfer: function (contractAddress, iPostTransferErc721, options) {
            return localVarFp.createErc721Transfer(contractAddress, iPostTransferErc721, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNFTMetadata: function (contractAddress, tokenId, options) {
            return localVarFp.getNFTMetadata(contractAddress, tokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the token to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBalances: function (address, pageSize, pageNumber, options) {
            return localVarFp.getTokenBalances(address, pageSize, pageNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
         * @param {string} address The address of the token to retrieve transfers for.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenTransfers: function (address, pageSize, pageNumber, options) {
            return localVarFp.getTokenTransfers(address, pageSize, pageNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc155} iPostMintErc155
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC1155Token: function (contractAddress, iPostMintErc155, options) {
            return localVarFp.mintERC1155Token(contractAddress, iPostMintErc155, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc20} iPostMintErc20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC20Token: function (contractAddress, iPostMintErc20, options) {
            return localVarFp.mintERC20Token(contractAddress, iPostMintErc20, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {IPostMintErc721} iPostMintErc721
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintERC721Token: function (contractAddress, iPostMintErc721, options) {
            return localVarFp.mintERC721Token(contractAddress, iPostMintErc721, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {INFTMetadata} iNFTMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNFTMetadata: function (contractAddress, tokenId, iNFTMetadata, options) {
            return localVarFp.postNFTMetadata(contractAddress, tokenId, iNFTMetadata, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} contractAddress
         * @param {number} tokenId
         * @param {INFTMetadata} iNFTMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNFTMetadata: function (contractAddress, tokenId, iNFTMetadata, options) {
            return localVarFp.putNFTMetadata(contractAddress, tokenId, iNFTMetadata, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TokensApiFactory = TokensApiFactory;
/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
var TokensApi = /** @class */ (function (_super) {
    __extends(TokensApi, _super);
    function TokensApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Transfers a specified ERC1155 token from one address to another.
     * @param {string} contractAddress The address of the ERC1155 token contract
     * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.createErc1155Transfer = function (contractAddress, iPostTransferErc1155, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).createErc1155Transfer(contractAddress, iPostTransferErc1155, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Transfers a specified amount of ERC20 tokens from one address to another.
     * @param {string} contractAddress The address of the ERC20 token contract
     * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.createErc20transfer = function (contractAddress, iPostTransferErc20, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).createErc20transfer(contractAddress, iPostTransferErc20, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Transfers a specified ERC721 token from one address to another.
     * @param {string} contractAddress The address of the ERC721 token contract
     * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.createErc721Transfer = function (contractAddress, iPostTransferErc721, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).createErc721Transfer(contractAddress, iPostTransferErc721, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.getNFTMetadata = function (contractAddress, tokenId, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).getNFTMetadata(contractAddress, tokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.getTokenBalances = function (address, pageSize, pageNumber, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).getTokenBalances(address, pageSize, pageNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.getTokenTransfers = function (address, pageSize, pageNumber, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).getTokenTransfers(address, pageSize, pageNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc155} iPostMintErc155
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.mintERC1155Token = function (contractAddress, iPostMintErc155, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).mintERC1155Token(contractAddress, iPostMintErc155, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc20} iPostMintErc20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.mintERC20Token = function (contractAddress, iPostMintErc20, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).mintERC20Token(contractAddress, iPostMintErc20, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc721} iPostMintErc721
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.mintERC721Token = function (contractAddress, iPostMintErc721, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).mintERC721Token(contractAddress, iPostMintErc721, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.postNFTMetadata = function (contractAddress, tokenId, iNFTMetadata, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).postNFTMetadata(contractAddress, tokenId, iNFTMetadata, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    TokensApi.prototype.putNFTMetadata = function (contractAddress, tokenId, iNFTMetadata, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).putNFTMetadata(contractAddress, tokenId, iNFTMetadata, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TokensApi;
}(base_1.BaseAPI));
exports.TokensApi = TokensApi;
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
var TransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
         * @param {string} hash The hash of the transaction to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByHash: function (hash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'hash' is not null or undefined
                            (0, common_1.assertParamExists)('getTransactionByHash', 'hash', hash);
                            localVarPath = "/transactions/{hash}"
                                .replace("{".concat("hash", "}"), encodeURIComponent(String(hash)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions: function (pageSize, pageNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/transactions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            if (pageSize !== undefined) {
                                localVarQueryParameter['page_size'] = pageSize;
                            }
                            if (pageNumber !== undefined) {
                                localVarQueryParameter['page_number'] = pageNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TransactionsApiAxiosParamCreator = TransactionsApiAxiosParamCreator;
/**
 * TransactionsApi - functional programming interface
 * @export
 */
var TransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
         * @param {string} hash The hash of the transaction to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByHash: function (hash, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTransactionByHash(hash, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TransactionsApi.getTransactionByHash']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions: function (pageSize, pageNumber, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTransactions(pageSize, pageNumber, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TransactionsApi.getTransactions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TransactionsApiFp = TransactionsApiFp;
/**
 * TransactionsApi - factory interface
 * @export
 */
var TransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TransactionsApiFp)(configuration);
    return {
        /**
         * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
         * @param {string} hash The hash of the transaction to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByHash: function (hash, options) {
            return localVarFp.getTransactionByHash(hash, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
         * @param {number} [pageSize] The number of Transactions per page (default: 10).
         * @param {number} [pageNumber] The page number to retrieve (default: 0).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions: function (pageSize, pageNumber, options) {
            return localVarFp.getTransactions(pageSize, pageNumber, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TransactionsApiFactory = TransactionsApiFactory;
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
var TransactionsApi = /** @class */ (function (_super) {
    __extends(TransactionsApi, _super);
    function TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
     * @param {string} hash The hash of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.getTransactionByHash = function (hash, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).getTransactionByHash(hash, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.getTransactions = function (pageSize, pageNumber, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).getTransactions(pageSize, pageNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TransactionsApi;
}(base_1.BaseAPI));
exports.TransactionsApi = TransactionsApi;
