/**
 * TSOA
 * Build swagger-compliant REST APIs using TypeScript and Node
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @enum {string}
 */
export declare const AccountType: {
    readonly Managed: "MANAGED";
    readonly ExternallyOwned: "EXTERNALLY_OWNED";
};
export type AccountType = typeof AccountType[keyof typeof AccountType];
/**
 *
 * @export
 * @enum {string}
 */
export declare const ContractExecutionStatus: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type ContractExecutionStatus = typeof ContractExecutionStatus[keyof typeof ContractExecutionStatus];
/**
 *
 * @export
 * @enum {string}
 */
export declare const ContractType: {
    readonly Erc20: "ERC20";
    readonly Erc721: "ERC721";
    readonly Erc1155: "ERC1155";
    readonly Custom: "CUSTOM";
};
export type ContractType = typeof ContractType[keyof typeof ContractType];
/**
 *
 * @export
 * @interface GetExecutions200Response
 */
export interface GetExecutions200Response {
    /**
     *
     * @type {Array<IContractExecution>}
     * @memberof GetExecutions200Response
     */
    'executions': Array<IContractExecution>;
    /**
     *
     * @type {number}
     * @memberof GetExecutions200Response
     */
    'totalCount': number;
    /**
     *
     * @type {string}
     * @memberof GetExecutions200Response
     */
    'message': string;
}
/**
 *
 * @export
 * @interface GetExecutions200ResponseAnyOf
 */
export interface GetExecutions200ResponseAnyOf {
    /**
     *
     * @type {string}
     * @memberof GetExecutions200ResponseAnyOf
     */
    'message': string;
}
/**
 *
 * @export
 * @interface IAccount
 */
export interface IAccount {
    /**
     *
     * @type {boolean}
     * @memberof IAccount
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof IAccount
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof IAccount
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof IAccount
     */
    'key': string;
    /**
     *
     * @type {AccountType}
     * @memberof IAccount
     */
    'type': AccountType;
    /**
     *
     * @type {string}
     * @memberof IAccount
     */
    'external_ref': string;
    /**
     *
     * @type {string}
     * @memberof IAccount
     */
    'address': string;
    /**
     *
     * @type {string}
     * @memberof IAccount
     */
    'organisation_key': string;
    /**
     *
     * @type {IEncryption}
     * @memberof IAccount
     */
    'encryption'?: IEncryption;
}
/**
 *
 * @export
 * @interface IContract
 */
export interface IContract {
    /**
     *
     * @type {boolean}
     * @memberof IContract
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof IContract
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof IContract
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof IContract
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof IContract
     */
    'address': string;
    /**
     *
     * @type {IContractMetadata}
     * @memberof IContract
     */
    'metadata': IContractMetadata;
    /**
     *
     * @type {Array<any>}
     * @memberof IContract
     */
    'abi': Array<any>;
    /**
     *
     * @type {boolean}
     * @memberof IContract
     */
    'active': boolean;
    /**
     *
     * @type {ContractType}
     * @memberof IContract
     */
    'type': ContractType;
    /**
     *
     * @type {string}
     * @memberof IContract
     */
    'organisation_key': string;
}
/**
 *
 * @export
 * @interface IContractExecution
 */
export interface IContractExecution {
    /**
     *
     * @type {string}
     * @memberof IContractExecution
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof IContractExecution
     */
    'organisation_key': string;
    /**
     *
     * @type {string}
     * @memberof IContractExecution
     */
    'contract_address': string;
    /**
     *
     * @type {string}
     * @memberof IContractExecution
     */
    'function_name': string;
    /**
     *
     * @type {Array<any>}
     * @memberof IContractExecution
     */
    'args': Array<any>;
    /**
     *
     * @type {ContractExecutionStatus}
     * @memberof IContractExecution
     */
    'status': ContractExecutionStatus;
    /**
     *
     * @type {string}
     * @memberof IContractExecution
     */
    'hash'?: string;
    /**
     *
     * @type {any}
     * @memberof IContractExecution
     */
    'token_metadata'?: any;
    /**
     *
     * @type {string}
     * @memberof IContractExecution
     */
    'error'?: string;
    /**
     *
     * @type {any}
     * @memberof IContractExecution
     */
    'receipt'?: any;
}
/**
 *
 * @export
 * @interface IContractExecutionListResponse
 */
export interface IContractExecutionListResponse {
    /**
     *
     * @type {Array<IContractExecution>}
     * @memberof IContractExecutionListResponse
     */
    'executions': Array<IContractExecution>;
    /**
     *
     * @type {number}
     * @memberof IContractExecutionListResponse
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface IContractMetadata
 */
export interface IContractMetadata {
    /**
     *
     * @type {string}
     * @memberof IContractMetadata
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof IContractMetadata
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof IContractMetadata
     */
    'symbol'?: string;
    /**
     *
     * @type {string}
     * @memberof IContractMetadata
     */
    'image'?: string;
    /**
     *
     * @type {string}
     * @memberof IContractMetadata
     */
    'banner_image'?: string;
}
/**
 *
 * @export
 * @interface IContractsListResponse
 */
export interface IContractsListResponse {
    /**
     *
     * @type {number}
     * @memberof IContractsListResponse
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof IContractsListResponse
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof IContractsListResponse
     */
    'total_items': number;
    /**
     *
     * @type {Array<IContract>}
     * @memberof IContractsListResponse
     */
    'items': Array<IContract>;
}
/**
 *
 * @export
 * @interface ICreateAccount
 */
export interface ICreateAccount {
    /**
     *
     * @type {AccountType}
     * @memberof ICreateAccount
     */
    'type': AccountType;
    /**
     *
     * @type {string}
     * @memberof ICreateAccount
     */
    'external_ref': string;
}
/**
 *
 * @export
 * @interface IDeployContract
 */
export interface IDeployContract {
    /**
     *
     * @type {IContractMetadata}
     * @memberof IDeployContract
     */
    'metadata': IContractMetadata;
    /**
     *
     * @type {ContractType}
     * @memberof IDeployContract
     */
    'type': ContractType;
}
/**
 *
 * @export
 * @interface IEncryption
 */
export interface IEncryption {
    /**
     *
     * @type {string}
     * @memberof IEncryption
     */
    'address': string;
    /**
     *
     * @type {string}
     * @memberof IEncryption
     */
    'salt': string;
    /**
     *
     * @type {string}
     * @memberof IEncryption
     */
    'key_store': string;
}
/**
 *
 * @export
 * @interface IInitiateSessionResponse
 */
export interface IInitiateSessionResponse {
    /**
     *
     * @type {string}
     * @memberof IInitiateSessionResponse
     */
    'sessionKey': string;
    /**
     *
     * @type {string}
     * @memberof IInitiateSessionResponse
     */
    'salt': string;
    /**
     *
     * @type {string}
     * @memberof IInitiateSessionResponse
     */
    'userKey': string;
    /**
     *
     * @type {string}
     * @memberof IInitiateSessionResponse
     */
    'encryptionKey': string;
}
/**
 *
 * @export
 * @interface INFTAttribute
 */
export interface INFTAttribute {
    /**
     *
     * @type {string}
     * @memberof INFTAttribute
     */
    'trait_type': string;
    /**
     *
     * @type {INFTAttributeValue}
     * @memberof INFTAttribute
     */
    'value': INFTAttributeValue;
}
/**
 *
 * @export
 * @interface INFTAttributeValue
 */
export interface INFTAttributeValue {
}
/**
 *
 * @export
 * @interface INFTMetadata
 */
export interface INFTMetadata {
    /**
     *
     * @type {string}
     * @memberof INFTMetadata
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof INFTMetadata
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof INFTMetadata
     */
    'image'?: string;
    /**
     *
     * @type {Array<INFTAttribute>}
     * @memberof INFTMetadata
     */
    'attributes': Array<INFTAttribute>;
}
/**
 *
 * @export
 * @interface IOrganisation
 */
export interface IOrganisation {
    /**
     *
     * @type {boolean}
     * @memberof IOrganisation
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'image': string;
    /**
     *
     * @type {string}
     * @memberof IOrganisation
     */
    'banner_image': string;
}
/**
 *
 * @export
 * @interface IPostAuthInitiate
 */
export interface IPostAuthInitiate {
    /**
     *
     * @type {string}
     * @memberof IPostAuthInitiate
     */
    'userKey': string;
}
/**
 *
 * @export
 * @interface IPostContract
 */
export interface IPostContract {
    /**
     *
     * @type {string}
     * @memberof IPostContract
     */
    'address': string;
    /**
     *
     * @type {IContractMetadata}
     * @memberof IPostContract
     */
    'metadata': IContractMetadata;
    /**
     *
     * @type {Array<any>}
     * @memberof IPostContract
     */
    'abi': Array<any>;
}
/**
 *
 * @export
 * @interface IPostContractExecution
 */
export interface IPostContractExecution {
    /**
     *
     * @type {string}
     * @memberof IPostContractExecution
     */
    'contract_address': string;
    /**
     *
     * @type {string}
     * @memberof IPostContractExecution
     */
    'function_name': string;
    /**
     *
     * @type {Array<any>}
     * @memberof IPostContractExecution
     */
    'args': Array<any>;
}
/**
 *
 * @export
 * @interface IPostCreateWebhook
 */
export interface IPostCreateWebhook {
    /**
     *
     * @type {string}
     * @memberof IPostCreateWebhook
     */
    'url': string;
}
/**
 *
 * @export
 * @interface IPostMintErc155
 */
export interface IPostMintErc155 {
    /**
     *
     * @type {number}
     * @memberof IPostMintErc155
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof IPostMintErc155
     */
    'user_id': string;
    /**
     *
     * @type {string}
     * @memberof IPostMintErc155
     */
    'token_id': string;
}
/**
 *
 * @export
 * @interface IPostMintErc20
 */
export interface IPostMintErc20 {
    /**
     *
     * @type {number}
     * @memberof IPostMintErc20
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof IPostMintErc20
     */
    'user_id': string;
}
/**
 *
 * @export
 * @interface IPostMintErc721
 */
export interface IPostMintErc721 {
    /**
     *
     * @type {INFTMetadata}
     * @memberof IPostMintErc721
     */
    'metadata': INFTMetadata;
    /**
     *
     * @type {number}
     * @memberof IPostMintErc721
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof IPostMintErc721
     */
    'user_id': string;
}
/**
 *
 * @export
 * @interface IPostOrganisation
 */
export interface IPostOrganisation {
    /**
     * Name of the organisation
     * @type {string}
     * @memberof IPostOrganisation
     */
    'name': string;
    /**
     * Description of the organisation
     * @type {string}
     * @memberof IPostOrganisation
     */
    'description': string;
    /**
     * URL to the organisation\'s logo
     * @type {string}
     * @memberof IPostOrganisation
     */
    'image': string;
    /**
     * URL to the organisation\'s banner image
     * @type {string}
     * @memberof IPostOrganisation
     */
    'banner_image': string;
}
/**
 *
 * @export
 * @interface IPostOrganisationResponse
 */
export interface IPostOrganisationResponse {
    /**
     *
     * @type {boolean}
     * @memberof IPostOrganisationResponse
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'image': string;
    /**
     *
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'banner_image': string;
    /**
     * API key for the organisation
     * @type {string}
     * @memberof IPostOrganisationResponse
     */
    'api_key': string;
}
/**
 *
 * @export
 * @interface IPostReadContract
 */
export interface IPostReadContract {
    /**
     *
     * @type {string}
     * @memberof IPostReadContract
     */
    'function_name': string;
    /**
     *
     * @type {Array<any>}
     * @memberof IPostReadContract
     */
    'args': Array<any>;
}
/**
 *
 * @export
 * @interface IPostTransferErc1155
 */
export interface IPostTransferErc1155 {
    /**
     *
     * @type {string}
     * @memberof IPostTransferErc1155
     */
    'from': string;
    /**
     *
     * @type {string}
     * @memberof IPostTransferErc1155
     */
    'to': string;
    /**
     *
     * @type {number}
     * @memberof IPostTransferErc1155
     */
    'tokenId': number;
    /**
     *
     * @type {number}
     * @memberof IPostTransferErc1155
     */
    'amount': number;
}
/**
 *
 * @export
 * @interface IPostTransferErc20
 */
export interface IPostTransferErc20 {
    /**
     *
     * @type {string}
     * @memberof IPostTransferErc20
     */
    'from': string;
    /**
     *
     * @type {string}
     * @memberof IPostTransferErc20
     */
    'to': string;
    /**
     *
     * @type {number}
     * @memberof IPostTransferErc20
     */
    'amount': number;
}
/**
 *
 * @export
 * @interface IPostTransferErc721
 */
export interface IPostTransferErc721 {
    /**
     *
     * @type {string}
     * @memberof IPostTransferErc721
     */
    'from': string;
    /**
     *
     * @type {string}
     * @memberof IPostTransferErc721
     */
    'to': string;
    /**
     *
     * @type {number}
     * @memberof IPostTransferErc721
     */
    'tokenId': number;
}
/**
 *
 * @export
 * @interface IPostUser
 */
export interface IPostUser {
    /**
     *
     * @type {string}
     * @memberof IPostUser
     */
    'address': string;
}
/**
 *
 * @export
 * @interface IPostUserOrganisation
 */
export interface IPostUserOrganisation {
    /**
     *
     * @type {string}
     * @memberof IPostUserOrganisation
     */
    'user_address': string;
    /**
     *
     * @type {string}
     * @memberof IPostUserOrganisation
     */
    'organisation_key': string;
    /**
     *
     * @type {UserOrganisationType}
     * @memberof IPostUserOrganisation
     */
    'type': UserOrganisationType;
}
/**
 *
 * @export
 * @interface IPutUser
 */
export interface IPutUser {
    /**
     *
     * @type {string}
     * @memberof IPutUser
     */
    'address': string;
}
/**
 *
 * @export
 * @interface IPutUserOrganisation
 */
export interface IPutUserOrganisation {
    /**
     *
     * @type {UserOrganisationType}
     * @memberof IPutUserOrganisation
     */
    'type'?: UserOrganisationType;
    /**
     *
     * @type {boolean}
     * @memberof IPutUserOrganisation
     */
    'active'?: boolean;
}
/**
 *
 * @export
 * @interface IReadContractResponse
 */
export interface IReadContractResponse {
    /**
     *
     * @type {any}
     * @memberof IReadContractResponse
     */
    'result': any;
}
/**
 *
 * @export
 * @interface ITokenAccount
 */
export interface ITokenAccount {
    /**
     *
     * @type {boolean}
     * @memberof ITokenAccount
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'contract': string;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'owner': string;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'organisation_key': string;
    /**
     *
     * @type {number}
     * @memberof ITokenAccount
     */
    'token_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ITokenAccount
     */
    'balance_raw': string;
    /**
     *
     * @type {number}
     * @memberof ITokenAccount
     */
    'balance': number;
}
/**
 *
 * @export
 * @interface ITokenAccountListResponse
 */
export interface ITokenAccountListResponse {
    /**
     *
     * @type {number}
     * @memberof ITokenAccountListResponse
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof ITokenAccountListResponse
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof ITokenAccountListResponse
     */
    'total_items': number;
    /**
     *
     * @type {Array<ITokenAccount>}
     * @memberof ITokenAccountListResponse
     */
    'items': Array<ITokenAccount>;
}
/**
 *
 * @export
 * @interface ITokenTransfer
 */
export interface ITokenTransfer {
    /**
     *
     * @type {boolean}
     * @memberof ITokenTransfer
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'hash': string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'contract': string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'from_address': string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'to_address': string;
    /**
     *
     * @type {string}
     * @memberof ITokenTransfer
     */
    'organisation_key': string;
    /**
     *
     * @type {number}
     * @memberof ITokenTransfer
     */
    'amount': number;
    /**
     *
     * @type {number}
     * @memberof ITokenTransfer
     */
    'token_id'?: number;
}
/**
 *
 * @export
 * @interface ITokenTransferListResponse
 */
export interface ITokenTransferListResponse {
    /**
     *
     * @type {number}
     * @memberof ITokenTransferListResponse
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof ITokenTransferListResponse
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof ITokenTransferListResponse
     */
    'total_items': number;
    /**
     *
     * @type {Array<ITokenTransfer>}
     * @memberof ITokenTransferListResponse
     */
    'items': Array<ITokenTransfer>;
}
/**
 *
 * @export
 * @interface ITransaction
 */
export interface ITransaction {
    /**
     *
     * @type {boolean}
     * @memberof ITransaction
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'hash': string;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'contract': string;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'receipt': string;
    /**
     *
     * @type {string}
     * @memberof ITransaction
     */
    'organisation_key': string;
}
/**
 *
 * @export
 * @interface ITransactionListResponse
 */
export interface ITransactionListResponse {
    /**
     *
     * @type {number}
     * @memberof ITransactionListResponse
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof ITransactionListResponse
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof ITransactionListResponse
     */
    'total_items': number;
    /**
     *
     * @type {Array<ITransaction>}
     * @memberof ITransactionListResponse
     */
    'items': Array<ITransaction>;
}
/**
 *
 * @export
 * @interface IUser
 */
export interface IUser {
    /**
     *
     * @type {boolean}
     * @memberof IUser
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof IUser
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof IUser
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof IUser
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof IUser
     */
    'address': string;
}
/**
 *
 * @export
 * @interface IUserOrganisation
 */
export interface IUserOrganisation {
    /**
     *
     * @type {boolean}
     * @memberof IUserOrganisation
     */
    'removed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof IUserOrganisation
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof IUserOrganisation
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof IUserOrganisation
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof IUserOrganisation
     */
    'user_address': string;
    /**
     *
     * @type {string}
     * @memberof IUserOrganisation
     */
    'organisation_key': string;
    /**
     *
     * @type {UserOrganisationType}
     * @memberof IUserOrganisation
     */
    'type': UserOrganisationType;
    /**
     *
     * @type {boolean}
     * @memberof IUserOrganisation
     */
    'active': boolean;
}
/**
 *
 * @export
 * @interface InitiateSession200Response
 */
export interface InitiateSession200Response {
    /**
     *
     * @type {string}
     * @memberof InitiateSession200Response
     */
    'sessionKey': string;
    /**
     *
     * @type {string}
     * @memberof InitiateSession200Response
     */
    'salt': string;
    /**
     *
     * @type {string}
     * @memberof InitiateSession200Response
     */
    'userKey': string;
    /**
     *
     * @type {string}
     * @memberof InitiateSession200Response
     */
    'encryptionKey': string;
    /**
     *
     * @type {string}
     * @memberof InitiateSession200Response
     */
    'message': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserOrganisationType: {
    readonly Admin: "admin";
    readonly Member: "member";
};
export type UserOrganisationType = typeof UserOrganisationType[keyof typeof UserOrganisationType];
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export declare const AccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {ICreateAccount} iCreateAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount: (iCreateAccount: ICreateAccount, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBalances: (address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTransfers: (address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {ICreateAccount} iCreateAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(iCreateAccount: ICreateAccount, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAccount>>;
    /**
     * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBalances(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITokenAccountListResponse>>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTransfers(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITokenTransferListResponse>>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {ICreateAccount} iCreateAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(iCreateAccount: ICreateAccount, options?: RawAxiosRequestConfig): AxiosPromise<IAccount>;
    /**
     * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBalances(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<ITokenAccountListResponse>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTransfers(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<ITokenTransferListResponse>;
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     *
     * @param {ICreateAccount} iCreateAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    createAccount(iCreateAccount: ICreateAccount, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IAccount, any>>;
    /**
     * Get a filtered list of  account balances. This endpoint retrieves token balances filtered by owner address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccountBalances(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ITokenAccountListResponse, any>>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the owner address to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccountTransfers(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ITokenTransferListResponse, any>>;
}
/**
 * AuthorisationApi - axios parameter creator
 * @export
 */
export declare const AuthorisationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {IPostAuthInitiate} iPostAuthInitiate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initiateSession: (iPostAuthInitiate: IPostAuthInitiate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthorisationApi - functional programming interface
 * @export
 */
export declare const AuthorisationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {IPostAuthInitiate} iPostAuthInitiate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initiateSession(iPostAuthInitiate: IPostAuthInitiate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitiateSession200Response>>;
};
/**
 * AuthorisationApi - factory interface
 * @export
 */
export declare const AuthorisationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {IPostAuthInitiate} iPostAuthInitiate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initiateSession(iPostAuthInitiate: IPostAuthInitiate, options?: RawAxiosRequestConfig): AxiosPromise<InitiateSession200Response>;
};
/**
 * AuthorisationApi - object-oriented interface
 * @export
 * @class AuthorisationApi
 * @extends {BaseAPI}
 */
export declare class AuthorisationApi extends BaseAPI {
    /**
     *
     * @param {IPostAuthInitiate} iPostAuthInitiate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorisationApi
     */
    initiateSession(iPostAuthInitiate: IPostAuthInitiate, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InitiateSession200Response, any>>;
}
/**
 * ContractExecutionsApi - axios parameter creator
 * @export
 */
export declare const ContractExecutionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {IPostContractExecution} iPostContractExecution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeContract: (iPostContractExecution: IPostContractExecution, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutionByKey: (key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} limit
     * @param {number} offset
     * @param {string} [contractAddress]
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutions: (limit: number, offset: number, contractAddress?: string, status?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ContractExecutionsApi - functional programming interface
 * @export
 */
export declare const ContractExecutionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {IPostContractExecution} iPostContractExecution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeContract(iPostContractExecution: IPostContractExecution, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutionByKey(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     *
     * @param {number} limit
     * @param {number} offset
     * @param {string} [contractAddress]
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutions(limit: number, offset: number, contractAddress?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExecutions200Response>>;
};
/**
 * ContractExecutionsApi - factory interface
 * @export
 */
export declare const ContractExecutionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {IPostContractExecution} iPostContractExecution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeContract(iPostContractExecution: IPostContractExecution, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutionByKey(key: string, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     *
     * @param {number} limit
     * @param {number} offset
     * @param {string} [contractAddress]
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutions(limit: number, offset: number, contractAddress?: string, status?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetExecutions200Response>;
};
/**
 * ContractExecutionsApi - object-oriented interface
 * @export
 * @class ContractExecutionsApi
 * @extends {BaseAPI}
 */
export declare class ContractExecutionsApi extends BaseAPI {
    /**
     *
     * @param {IPostContractExecution} iPostContractExecution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractExecutionsApi
     */
    executeContract(iPostContractExecution: IPostContractExecution, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractExecutionsApi
     */
    getExecutionByKey(key: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     *
     * @param {number} limit
     * @param {number} offset
     * @param {string} [contractAddress]
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractExecutionsApi
     */
    getExecutions(limit: number, offset: number, contractAddress?: string, status?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetExecutions200Response, any>>;
}
/**
 * ContractsApi - axios parameter creator
 * @export
 */
export declare const ContractsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add a new contract. This endpoint creates a new contract with the provided contract data.
     * @param {IPostContract} iPostContract The contract data required to create the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContract: (iPostContract: IPostContract, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
     * @param {IDeployContract} iDeployContract The data required to deploy the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContract: (iDeployContract: IDeployContract, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
     * @param {ContractType} [type] Optional filter by contract type.
     * @param {number} [pageSize] The number of contracts per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilteredContracts: (type?: ContractType, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
     * @param {string} address The address of the contract to execute.
     * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readContract: (address: string, iPostReadContract: IPostReadContract, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
     * @param {string} contractAddress The address of the contract to add the webhook to.
     * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhook: (contractAddress: string, iPostCreateWebhook: IPostCreateWebhook, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ContractsApi - functional programming interface
 * @export
 */
export declare const ContractsApiFp: (configuration?: Configuration) => {
    /**
     * Add a new contract. This endpoint creates a new contract with the provided contract data.
     * @param {IPostContract} iPostContract The contract data required to create the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContract(iPostContract: IPostContract, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContract>>;
    /**
     * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
     * @param {IDeployContract} iDeployContract The data required to deploy the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContract(iDeployContract: IDeployContract, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContract>>;
    /**
     * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
     * @param {ContractType} [type] Optional filter by contract type.
     * @param {number} [pageSize] The number of contracts per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilteredContracts(type?: ContractType, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractsListResponse>>;
    /**
     * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
     * @param {string} address The address of the contract to execute.
     * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readContract(address: string, iPostReadContract: IPostReadContract, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IReadContractResponse>>;
    /**
     * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
     * @param {string} contractAddress The address of the contract to add the webhook to.
     * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhook(contractAddress: string, iPostCreateWebhook: IPostCreateWebhook, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * ContractsApi - factory interface
 * @export
 */
export declare const ContractsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add a new contract. This endpoint creates a new contract with the provided contract data.
     * @param {IPostContract} iPostContract The contract data required to create the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContract(iPostContract: IPostContract, options?: RawAxiosRequestConfig): AxiosPromise<IContract>;
    /**
     * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
     * @param {IDeployContract} iDeployContract The data required to deploy the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContract(iDeployContract: IDeployContract, options?: RawAxiosRequestConfig): AxiosPromise<IContract>;
    /**
     * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
     * @param {ContractType} [type] Optional filter by contract type.
     * @param {number} [pageSize] The number of contracts per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilteredContracts(type?: ContractType, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<IContractsListResponse>;
    /**
     * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
     * @param {string} address The address of the contract to execute.
     * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readContract(address: string, iPostReadContract: IPostReadContract, options?: RawAxiosRequestConfig): AxiosPromise<IReadContractResponse>;
    /**
     * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
     * @param {string} contractAddress The address of the contract to add the webhook to.
     * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhook(contractAddress: string, iPostCreateWebhook: IPostCreateWebhook, options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export declare class ContractsApi extends BaseAPI {
    /**
     * Add a new contract. This endpoint creates a new contract with the provided contract data.
     * @param {IPostContract} iPostContract The contract data required to create the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    addContract(iPostContract: IPostContract, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContract, any>>;
    /**
     * Deploy a contract. This endpoint deploys a contract with the provided deployment data.
     * @param {IDeployContract} iDeployContract The data required to deploy the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    deployContract(iDeployContract: IDeployContract, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContract, any>>;
    /**
     * Get a filtered list of contracts. This endpoint retrieves contracts filtered by type and paginated by page size and page number.
     * @param {ContractType} [type] Optional filter by contract type.
     * @param {number} [pageSize] The number of contracts per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    getFilteredContracts(type?: ContractType, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractsListResponse, any>>;
    /**
     * Execute a contract by its address. This endpoint executes a contract with the provided execution data.
     * @param {string} address The address of the contract to execute.
     * @param {IPostReadContract} iPostReadContract The data required to execute the contract.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    readContract(address: string, iPostReadContract: IPostReadContract, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IReadContractResponse, any>>;
    /**
     * Add a webhook to a contract. This endpoint adds a webhook to a contract with the provided webhook data. The webhook will be triggered when the contract is executed.
     * @param {string} contractAddress The address of the contract to add the webhook to.
     * @param {IPostCreateWebhook} iPostCreateWebhook The data required to create the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    webhook(contractAddress: string, iPostCreateWebhook: IPostCreateWebhook, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteStatus: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteStatus(options?: RawAxiosRequestConfig): AxiosPromise<boolean>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSiteStatus(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
}
/**
 * OrganisationsApi - axios parameter creator
 * @export
 */
export declare const OrganisationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
     * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganisation: (iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
     * @param {string} id The ID of the organisation to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisationById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
     * @param {string} [name] Optional name filter to search for organisations by name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisations: (name?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
     * @param {string} id The ID of the organisation to update.
     * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganisationById: (id: string, iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrganisationsApi - functional programming interface
 * @export
 */
export declare const OrganisationsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
     * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganisation(iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPostOrganisationResponse>>;
    /**
     * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
     * @param {string} id The ID of the organisation to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisationById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IOrganisation>>;
    /**
     * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
     * @param {string} [name] Optional name filter to search for organisations by name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisations(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IOrganisation>>>;
    /**
     * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
     * @param {string} id The ID of the organisation to update.
     * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganisationById(id: string, iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IOrganisation>>;
};
/**
 * OrganisationsApi - factory interface
 * @export
 */
export declare const OrganisationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
     * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganisation(iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig): AxiosPromise<IPostOrganisationResponse>;
    /**
     * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
     * @param {string} id The ID of the organisation to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisationById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<IOrganisation>;
    /**
     * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
     * @param {string} [name] Optional name filter to search for organisations by name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisations(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<IOrganisation>>;
    /**
     * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
     * @param {string} id The ID of the organisation to update.
     * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganisationById(id: string, iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig): AxiosPromise<IOrganisation>;
};
/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */
export declare class OrganisationsApi extends BaseAPI {
    /**
     * Create a new organisation. This endpoint will create a new organisation with the given data and return the created organisation, including its API key.
     * @param {IPostOrganisation} iPostOrganisation The data required to create a new organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    createOrganisation(iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IPostOrganisationResponse, any>>;
    /**
     * Retrieve an organisation by its ID.  This endpoint returns an organisation with the given ID.
     * @param {string} id The ID of the organisation to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    getOrganisationById(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IOrganisation, any>>;
    /**
     * Get a list of organisations with optional filters. This endpoint retrieves a list of organisations, optionally filtered by name.
     * @param {string} [name] Optional name filter to search for organisations by name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    getOrganisations(name?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IOrganisation[], any>>;
    /**
     * Update an existing organisation by its ID. This endpoint updates an organisation with the provided data.
     * @param {string} id The ID of the organisation to update.
     * @param {IPostOrganisation} iPostOrganisation The updated organisation data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    updateOrganisationById(id: string, iPostOrganisation: IPostOrganisation, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IOrganisation, any>>;
}
/**
 * TokensApi - axios parameter creator
 * @export
 */
export declare const TokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Transfers a specified ERC1155 token from one address to another.
     * @param {string} contractAddress The address of the ERC1155 token contract
     * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc1155Transfer: (contractAddress: string, iPostTransferErc1155: IPostTransferErc1155, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Transfers a specified amount of ERC20 tokens from one address to another.
     * @param {string} contractAddress The address of the ERC20 token contract
     * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc20transfer: (contractAddress: string, iPostTransferErc20: IPostTransferErc20, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Transfers a specified ERC721 token from one address to another.
     * @param {string} contractAddress The address of the ERC721 token contract
     * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc721Transfer: (contractAddress: string, iPostTransferErc721: IPostTransferErc721, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNFTMetadata: (contractAddress: string, tokenId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBalances: (address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenTransfers: (address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc155} iPostMintErc155
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC1155Token: (contractAddress: string, iPostMintErc155: IPostMintErc155, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc20} iPostMintErc20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC20Token: (contractAddress: string, iPostMintErc20: IPostMintErc20, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc721} iPostMintErc721
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC721Token: (contractAddress: string, iPostMintErc721: IPostMintErc721, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postNFTMetadata: (contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putNFTMetadata: (contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokensApi - functional programming interface
 * @export
 */
export declare const TokensApiFp: (configuration?: Configuration) => {
    /**
     * Transfers a specified ERC1155 token from one address to another.
     * @param {string} contractAddress The address of the ERC1155 token contract
     * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc1155Transfer(contractAddress: string, iPostTransferErc1155: IPostTransferErc1155, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     * Transfers a specified amount of ERC20 tokens from one address to another.
     * @param {string} contractAddress The address of the ERC20 token contract
     * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc20transfer(contractAddress: string, iPostTransferErc20: IPostTransferErc20, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     * Transfers a specified ERC721 token from one address to another.
     * @param {string} contractAddress The address of the ERC721 token contract
     * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc721Transfer(contractAddress: string, iPostTransferErc721: IPostTransferErc721, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNFTMetadata(contractAddress: string, tokenId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<INFTMetadata>>;
    /**
     * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBalances(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITokenAccountListResponse>>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenTransfers(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITokenTransferListResponse>>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc155} iPostMintErc155
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC1155Token(contractAddress: string, iPostMintErc155: IPostMintErc155, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc20} iPostMintErc20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC20Token(contractAddress: string, iPostMintErc20: IPostMintErc20, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc721} iPostMintErc721
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC721Token(contractAddress: string, iPostMintErc721: IPostMintErc721, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IContractExecution>>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postNFTMetadata(contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<INFTMetadata>>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putNFTMetadata(contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<INFTMetadata>>;
};
/**
 * TokensApi - factory interface
 * @export
 */
export declare const TokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Transfers a specified ERC1155 token from one address to another.
     * @param {string} contractAddress The address of the ERC1155 token contract
     * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc1155Transfer(contractAddress: string, iPostTransferErc1155: IPostTransferErc1155, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     * Transfers a specified amount of ERC20 tokens from one address to another.
     * @param {string} contractAddress The address of the ERC20 token contract
     * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc20transfer(contractAddress: string, iPostTransferErc20: IPostTransferErc20, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     * Transfers a specified ERC721 token from one address to another.
     * @param {string} contractAddress The address of the ERC721 token contract
     * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createErc721Transfer(contractAddress: string, iPostTransferErc721: IPostTransferErc721, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNFTMetadata(contractAddress: string, tokenId: number, options?: RawAxiosRequestConfig): AxiosPromise<INFTMetadata>;
    /**
     * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBalances(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<ITokenAccountListResponse>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenTransfers(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<ITokenTransferListResponse>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc155} iPostMintErc155
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC1155Token(contractAddress: string, iPostMintErc155: IPostMintErc155, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc20} iPostMintErc20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC20Token(contractAddress: string, iPostMintErc20: IPostMintErc20, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc721} iPostMintErc721
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintERC721Token(contractAddress: string, iPostMintErc721: IPostMintErc721, options?: RawAxiosRequestConfig): AxiosPromise<IContractExecution>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postNFTMetadata(contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig): AxiosPromise<INFTMetadata>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putNFTMetadata(contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig): AxiosPromise<INFTMetadata>;
};
/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export declare class TokensApi extends BaseAPI {
    /**
     * Transfers a specified ERC1155 token from one address to another.
     * @param {string} contractAddress The address of the ERC1155 token contract
     * @param {IPostTransferErc1155} iPostTransferErc1155 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    createErc1155Transfer(contractAddress: string, iPostTransferErc1155: IPostTransferErc1155, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     * Transfers a specified amount of ERC20 tokens from one address to another.
     * @param {string} contractAddress The address of the ERC20 token contract
     * @param {IPostTransferErc20} iPostTransferErc20 The transfer parameters containing: - from: The address sending the tokens - to: The address receiving the tokens - amount: The amount of tokens to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    createErc20transfer(contractAddress: string, iPostTransferErc20: IPostTransferErc20, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     * Transfers a specified ERC721 token from one address to another.
     * @param {string} contractAddress The address of the ERC721 token contract
     * @param {IPostTransferErc721} iPostTransferErc721 The transfer parameters containing: - from: The address sending the token - to: The address receiving the token - tokenId: The ID of the token to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    createErc721Transfer(contractAddress: string, iPostTransferErc721: IPostTransferErc721, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    getNFTMetadata(contractAddress: string, tokenId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<INFTMetadata, any>>;
    /**
     * Get a filtered list of  token balances. This endpoint retrieves token balances filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    getTokenBalances(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ITokenAccountListResponse, any>>;
    /**
     * Get a filtered list of  token transfers. This endpoint retrieves token transfers filtered by contract address and paginated by page size and page number.
     * @param {string} address The address of the token to retrieve transfers for.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    getTokenTransfers(address: string, pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ITokenTransferListResponse, any>>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc155} iPostMintErc155
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    mintERC1155Token(contractAddress: string, iPostMintErc155: IPostMintErc155, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc20} iPostMintErc20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    mintERC20Token(contractAddress: string, iPostMintErc20: IPostMintErc20, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     *
     * @param {string} contractAddress
     * @param {IPostMintErc721} iPostMintErc721
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    mintERC721Token(contractAddress: string, iPostMintErc721: IPostMintErc721, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IContractExecution, any>>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    postNFTMetadata(contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<INFTMetadata, any>>;
    /**
     *
     * @param {string} contractAddress
     * @param {number} tokenId
     * @param {INFTMetadata} iNFTMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    putNFTMetadata(contractAddress: string, tokenId: number, iNFTMetadata: INFTMetadata, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<INFTMetadata, any>>;
}
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
     * @param {string} hash The hash of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionByHash: (hash: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions: (pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
     * @param {string} hash The hash of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionByHash(hash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITransaction>>;
    /**
     * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions(pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITransactionListResponse>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
     * @param {string} hash The hash of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionByHash(hash: string, options?: RawAxiosRequestConfig): AxiosPromise<ITransaction>;
    /**
     * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions(pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<ITransactionListResponse>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Get a transaction by its hash.    This endpoint retrieves a transaction by its hash.
     * @param {string} hash The hash of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionByHash(hash: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ITransaction, any>>;
    /**
     * Get a filtered list of Transactions. This endpoint retrieves Transactions filtered and paginated by page size and page number.
     * @param {number} [pageSize] The number of Transactions per page (default: 10).
     * @param {number} [pageNumber] The page number to retrieve (default: 0).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactions(pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ITransactionListResponse, any>>;
}
